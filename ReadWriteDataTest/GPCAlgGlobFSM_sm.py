# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : GPCAlgGlobFSM_sm.sm

import statemap


class GPCAlgGlobProcState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def InitDone(self, fsm):
        self.Default(fsm)

    def InitError(self, fsm, msg):
        self.Default(fsm)

    def MPCActive(self, fsm):
        self.Default(fsm)

    def MPCDone(self, fsm):
        self.Default(fsm)

    def MPCImpossible(self, fsm, msg):
        self.Default(fsm)

    def MPCInactif(self, fsm):
        self.Default(fsm)

    def OPCWrite(self, fsm, msg):
        self.Default(fsm)

    def OPCWriteError(self, fsm, msg):
        self.Default(fsm)

    def Reset(self, fsm):
        self.Default(fsm)

    def TrigError(self, fsm, msg):
        self.Default(fsm)

    def TrigOK(self, fsm, dt):
        self.Default(fsm)

    def VarsError(self, fsm, msg):
        self.Default(fsm)

    def VarsOK(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write('TRANSITION   : Default\n')
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class GPCMap_Default(GPCAlgGlobProcState):

    def Default(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.Default\n")

        endState = fsm.getState()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.Default.Default()\n")

        fsm.clearState()
        try:
            ctxt.logIgnored()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.Default.Default()\n")

            fsm.setState(endState)

class GPCMap_INIT(GPCMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.initInit()

    def InitDone(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.INIT\n")

        if ctxt.isInitDone() :
            fsm.getState().Exit(fsm)
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.INIT.InitDone()\n")

            fsm.clearState()
            try:
                ctxt.doInitRTrigParam()
            finally:
                if fsm.getDebugFlag() == True:
                    fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.INIT.InitDone()\n")

                fsm.setState(GPCMap.getRTrig)
                fsm.getState().Entry(fsm)
        else:
            endState = fsm.getState()
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.INIT.InitDone()\n")

            fsm.clearState()
            try:
                ctxt.doInit()
            finally:
                if fsm.getDebugFlag() == True:
                    fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.INIT.InitDone()\n")

                fsm.setState(endState)


    def InitError(self, fsm, msg):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.INIT\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.INIT.InitError(msg)\n")

        fsm.clearState()
        try:
            ctxt.doWarning(msg)
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.INIT.InitError(msg)\n")

            fsm.setState(GPCMap.GPCisOffline)
            fsm.getState().Entry(fsm)

class GPCMap_GPCisOffline(GPCMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.doSetGPCOffline()

    def Reset(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.GPCisOffline\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.GPCisOffline.Reset()\n")

        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.GPCisOffline.Reset()\n")

        fsm.setState(GPCMap.INIT)
        fsm.getState().Entry(fsm)

class GPCMap_GetRTrig(GPCMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.doRTrigInit()

    def Exit(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.doRTrigStop()

    def TrigError(self, fsm, msg):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.GetRTrig\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.GetRTrig.TrigError(msg)\n")

        fsm.clearState()
        try:
            ctxt.doWarning(msg)
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.GetRTrig.TrigError(msg)\n")

            fsm.setState(GPCMap.GPCisOffline)
            fsm.getState().Entry(fsm)

    def TrigOK(self, fsm, dt):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.GetRTrig\n")

        if ctxt.isNotSync() :
            fsm.getState().Exit(fsm)
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.GetRTrig.TrigOK(dt)\n")

            fsm.clearState()
            try:
                ctxt.doUpdateRTrigParam(dt)
            finally:
                if fsm.getDebugFlag() == True:
                    fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.GetRTrig.TrigOK(dt)\n")

                fsm.setState(GPCMap.readOPCVars)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.GetRTrig.TrigOK(dt)\n")

            # No actions.
            pass
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.GetRTrig.TrigOK(dt)\n")

            fsm.setState(GPCMap.readOPCVars)
            fsm.getState().Entry(fsm)


class GPCMap_ReadOPCVars(GPCMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.doReadOPC()

    def VarsError(self, fsm, msg):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.ReadOPCVars\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.ReadOPCVars.VarsError(msg)\n")

        fsm.clearState()
        try:
            ctxt.doWarning(msg)
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.ReadOPCVars.VarsError(msg)\n")

            fsm.setState(GPCMap.GPCisOffline)
            fsm.getState().Entry(fsm)

    def VarsOK(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.ReadOPCVars\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.ReadOPCVars.VarsOK()\n")

        fsm.clearState()
        try:
            ctxt.doUpdateParam()
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.ReadOPCVars.VarsOK()\n")

            fsm.setState(GPCMap.checkSysStates)
            fsm.getState().Entry(fsm)

class GPCMap_CheckSysStates(GPCMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.doCheckSysStates()

    def MPCActive(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.CheckSysStates\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.CheckSysStates.MPCActive()\n")

        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.CheckSysStates.MPCActive()\n")

        fsm.setState(GPCMap.runMPC)
        fsm.getState().Entry(fsm)

    def MPCImpossible(self, fsm, msg):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.CheckSysStates\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.CheckSysStates.MPCImpossible(msg)\n")

        fsm.clearState()
        try:
            ctxt.doWarning(msg)
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.CheckSysStates.MPCImpossible(msg)\n")

            fsm.setState(GPCMap.GPCisOffline)
            fsm.getState().Entry(fsm)

    def MPCInactif(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.CheckSysStates\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.CheckSysStates.MPCInactif()\n")

        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.CheckSysStates.MPCInactif()\n")

        fsm.setState(GPCMap.getRTrig)
        fsm.getState().Entry(fsm)

class GPCMap_RunMPC(GPCMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.doRunMPC()

    def MPCDone(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.RunMPC\n")

        if ctxt.isNoOPCWrite() :
            fsm.getState().Exit(fsm)
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.RunMPC.MPCDone()\n")

            fsm.clearState()
            try:
                ctxt.doLogMPCResults()
                ctxt.doResetWriteVars()
            finally:
                if fsm.getDebugFlag() == True:
                    fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.RunMPC.MPCDone()\n")

                fsm.setState(GPCMap.getRTrig)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.RunMPC.MPCDone()\n")

            fsm.clearState()
            try:
                ctxt.doLogMPCResults()
            finally:
                if fsm.getDebugFlag() == True:
                    fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.RunMPC.MPCDone()\n")

                fsm.setState(GPCMap.writeOPCVars)
                fsm.getState().Entry(fsm)


    def MPCImpossible(self, fsm, msg):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.RunMPC\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.RunMPC.MPCImpossible(msg)\n")

        fsm.clearState()
        try:
            ctxt.doWarning(msg)
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.RunMPC.MPCImpossible(msg)\n")

            fsm.setState(GPCMap.GPCisOffline)
            fsm.getState().Entry(fsm)

class GPCMap_WriteOPCVars(GPCMap_Default):

    def Entry(self, fsm):
        ctxt = fsm.getOwner()
        ctxt.doWriteOPCInit()

    def OPCWrite(self, fsm, msg):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.WriteOPCVars\n")

        if ctxt.isOPCWriteOK() :
            fsm.getState().Exit(fsm)
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.WriteOPCVars.OPCWrite(msg)\n")

            fsm.clearState()
            try:
                ctxt.doWTrigInit()
            finally:
                if fsm.getDebugFlag() == True:
                    fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.WriteOPCVars.OPCWrite(msg)\n")

                fsm.setState(GPCMap.getRTrig)
                fsm.getState().Entry(fsm)
        elif ctxt.isOPCWriteError() :
            fsm.getState().Exit(fsm)
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.WriteOPCVars.OPCWrite(msg)\n")

            fsm.clearState()
            try:
                ctxt.doWarning(msg)
            finally:
                if fsm.getDebugFlag() == True:
                    fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.WriteOPCVars.OPCWrite(msg)\n")

                fsm.setState(GPCMap.GPCisOffline)
                fsm.getState().Entry(fsm)
        else:
            endState = fsm.getState()
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.WriteOPCVars.OPCWrite(msg)\n")

            fsm.clearState()
            try:
                ctxt.doWriteOPC()
            finally:
                if fsm.getDebugFlag() == True:
                    fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.WriteOPCVars.OPCWrite(msg)\n")

                fsm.setState(endState)


    def OPCWriteError(self, fsm, msg):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("LEAVING STATE   : GPCMap.WriteOPCVars\n")

        fsm.getState().Exit(fsm)
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("ENTER TRANSITION: GPCMap.WriteOPCVars.OPCWriteError(msg)\n")

        fsm.clearState()
        try:
            ctxt.doWarning(msg)
        finally:
            if fsm.getDebugFlag() == True:
                fsm.getDebugStream().write("EXIT TRANSITION : GPCMap.WriteOPCVars.OPCWriteError(msg)\n")

            fsm.setState(GPCMap.GPCisOffline)
            fsm.getState().Entry(fsm)

class GPCMap(object):

    INIT = GPCMap_INIT('GPCMap.INIT', 0)
    GPCisOffline = GPCMap_GPCisOffline('GPCMap.GPCisOffline', 1)
    getRTrig = GPCMap_GetRTrig('GPCMap.GetRTrig', 2)
    readOPCVars = GPCMap_ReadOPCVars('GPCMap.ReadOPCVars', 3)
    checkSysStates = GPCMap_CheckSysStates('GPCMap.CheckSysStates', 4)
    runMPC = GPCMap_RunMPC('GPCMap.RunMPC', 5)
    writeOPCVars = GPCMap_WriteOPCVars('GPCMap.WriteOPCVars', 6)
    Default = GPCMap_Default('GPCMap.Default', -1)

class GPCAlgGlobProc_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, GPCMap.INIT)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
